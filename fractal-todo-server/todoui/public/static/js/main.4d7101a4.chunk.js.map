{"version":3,"sources":["hoc/suspenseHoc.js","App.js","serviceWorker.js","services/reducers/index.js","services/store.js","index.js"],"names":["suspenseHoc","WrapComponent","fallback","BucketDetailPage","lazy","AuthPage","HomePage","App","exact","path","component","Boolean","window","location","hostname","match","reducers","history","combineReducers","router","connectRouter","persistConfig","key","storage","blacklist","createBrowserHistory","routeMiddleware","routerMiddleware","middleware","thunk","composeEnhancers","compose","customPersistReducer","persistReducer","reducer","store","createStore","applyMiddleware","__REDUX_DEVTOOLS_EXTENSION__","trace","persistor","persistStore","lightTheme","createMuiTheme","palette","primary","main","secondary","background","default","accent","text","spacing","typography","fontFamily","join","ReactDOM","render","loading","ThemeProvider","theme","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mQAaeA,EAXK,SAACC,GAQnB,OAPA,WACE,OACE,kBAAC,WAAD,CAAUC,SAAU,uCAClB,kBAACD,EAAD,SCDFE,EAAmBC,gBAAK,kBAAM,8DAC9BC,EAAWD,gBAAK,kBAAM,uDACtBE,EAAWF,gBAAK,kBAAM,8DAYbG,EAVH,WACV,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWV,EAAYK,KAC7C,kBAAC,IAAD,CAAOG,OAAK,EAACC,KAAK,QAAQC,UAAWV,EAAYM,KACjD,kBAAC,IAAD,CAAOG,KAAK,cAAcC,UAAWV,EAAYG,OCdnCQ,QACW,cAA7BC,OAAOC,SAASC,UACe,UAA7BF,OAAOC,SAASC,UAChBF,OAAOC,SAASC,SAASC,MACvB,2D,2ECISC,EALE,SAACC,GAAD,OACfC,YAAgB,CACdC,OAAQC,YAAcH,M,QCGpBI,EAAgB,CACpBC,IAAK,OACLC,YACAC,UAAW,CAAC,WAGRP,EAAUQ,cAEVC,EAAkBC,YAAiBV,GACnCW,EAAa,CAACC,IAAOH,GACrBI,EAAmBC,IACnBC,EAAuBC,YAAeZ,EAAea,EAAQjB,IAE7DkB,EAAQC,YACZJ,EACAF,EACEO,IAAe,WAAf,EAAmBT,GACnBhB,OAAO0B,8BACL1B,OAAO0B,6BAA6B,CAACC,OAAO,MAI5CC,EAAYC,YAAaN,G,gBClBzBO,EAAaC,YAAe,CAChCC,QAAS,CACPC,QAAS,CAACC,KAAM,WAChBC,UAAW,CAACD,KAAM,uBAClBE,WAAY,CACVC,QAAS,WAEXC,OAAQ,UACRC,KAAM,CACJN,QAAS,yBACTE,UAAW,0BAGfK,QAAS,EACTC,WAAY,CACVC,WAAY,CAAC,SAASC,KAAK,QAI/BC,IAASC,OACP,kBAAC,IAAD,CAAUtB,MAAOA,GACf,kBAAC,cAAD,CAAauB,QAAS,wCAAoBlB,UAAWA,GACnD,kBAACmB,EAAA,EAAD,CAAeC,MAAOlB,GACpB,kBAAC,IAAD,CAAiBzB,QAASA,GACxB,kBAAC,EAAD,UAKR4C,SAASC,eAAe,SHoEpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4d7101a4.chunk.js","sourcesContent":["import React, {Suspense} from 'react';\r\n\r\nconst suspenseHoc = (WrapComponent) => {\r\n  function HocContent() {\r\n    return (\r\n      <Suspense fallback={<p>Loading</p>}>\r\n        <WrapComponent />\r\n      </Suspense>\r\n    );\r\n  }\r\n  return HocContent;\r\n};\r\n\r\nexport default suspenseHoc;\r\n","import React, {lazy} from 'react';\nimport './App.css';\nimport {Route, Switch} from 'react-router';\nimport suspenseHoc from './hoc/suspenseHoc';\n\nconst BucketDetailPage = lazy(() => import('./pages/BucketDetailPage'));\nconst AuthPage = lazy(() => import('./pages/AuthPage'));\nconst HomePage = lazy(() => import('./pages/HomePage'));\n\nconst App = () => {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={suspenseHoc(AuthPage)} />\n      <Route exact path=\"/home\" component={suspenseHoc(HomePage)} />\n      <Route path=\"/bucket/:id\" component={suspenseHoc(BucketDetailPage)} />\n    </Switch>\n  );\n};\n\nexport default App;\n","const isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    window.location.hostname === '[::1]' ||\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        checkValidServiceWorker(swUrl, config);\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers} from 'redux';\r\nimport {connectRouter} from 'connected-react-router';\r\n\r\nconst reducers = (history) =>\r\n  combineReducers({\r\n    router: connectRouter(history),\r\n  });\r\n\r\nexport default reducers;\r\n","import {applyMiddleware, compose, createStore} from 'redux';\r\nimport {persistStore, persistReducer} from 'redux-persist';\r\nimport {routerMiddleware} from 'connected-react-router';\r\nimport {createBrowserHistory} from 'history';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport reducer from './reducers';\r\nimport thunk from 'redux-thunk';\r\n\r\nconst persistConfig = {\r\n  key: 'root',\r\n  storage,\r\n  blacklist: ['router'],\r\n};\r\n\r\nconst history = createBrowserHistory();\r\n\r\nconst routeMiddleware = routerMiddleware(history);\r\nconst middleware = [thunk, routeMiddleware];\r\nconst composeEnhancers = compose;\r\nconst customPersistReducer = persistReducer(persistConfig, reducer(history));\r\n\r\nconst store = createStore(\r\n  customPersistReducer,\r\n  composeEnhancers(\r\n    applyMiddleware(...middleware),\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ &&\r\n      window.__REDUX_DEVTOOLS_EXTENSION__({trace: true})\r\n  )\r\n);\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport {store, persistor, history};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport {ConnectedRouter} from 'connected-react-router';\nimport {PersistGate} from 'redux-persist/lib/integration/react';\nimport {store, persistor, history} from './services/store';\nimport {ThemeProvider} from '@material-ui/core/styles';\nimport {createMuiTheme} from '@material-ui/core';\n\nconst lightTheme = createMuiTheme({\n  palette: {\n    primary: {main: '#F6A61E'},\n    secondary: {main: 'rgba(0, 0, 0, 0.36)'},\n    background: {\n      default: '#FFFFFF',\n    },\n    accent: '#212A39',\n    text: {\n      primary: 'rgba(33, 42, 57, 0.87)',\n      secondary: 'rgba(33, 42, 57, 0.5)',\n    },\n  },\n  spacing: 2,\n  typography: {\n    fontFamily: ['Karla'].join(','),\n  },\n});\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={<div>Loading</div>} persistor={persistor}>\n      <ThemeProvider theme={lightTheme}>\n        <ConnectedRouter history={history}>\n          <App />\n        </ConnectedRouter>\n      </ThemeProvider>\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}